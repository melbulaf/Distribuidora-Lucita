/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Proyect.View;

import Proyect.Model.Producto;
import Proyect.Model.Inventario;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samuel
 */
public class FormInventario extends javax.swing.JPanel {

    /**
     * Creates new form FormInventario
     */
    public FormInventario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Titulo = new javax.swing.JLabel();
        LabelBusqueda = new javax.swing.JLabel();
        CampoBusqueda = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        BotonBuscar = new javax.swing.JButton();
        MensajeError = new javax.swing.JLabel();
        labelOrdenarPor = new javax.swing.JLabel();
        ListaDeFiltros = new javax.swing.JComboBox<>();
        BotonOrdenar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaProductos = new javax.swing.JTable();

        Titulo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Titulo.setText("Inventario");

        LabelBusqueda.setText("Nombre o Código del producto:");

        CampoBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoBusquedaActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        jSeparator1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        BotonBuscar.setText("Buscar");
        BotonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarActionPerformed(evt);
            }
        });

        labelOrdenarPor.setText("Ordenar por:");

        ListaDeFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código", "Nombre", "Categoría", "Precio", "Cantidad" }));

        BotonOrdenar.setText("Ordenar");
        BotonOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonOrdenarActionPerformed(evt);
            }
        });

        TablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Categoría", "Precio", "Precio Compra", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TablaProductos);
        if (TablaProductos.getColumnModel().getColumnCount() > 0) {
            TablaProductos.getColumnModel().getColumn(0).setResizable(false);
            TablaProductos.getColumnModel().getColumn(1).setResizable(false);
            TablaProductos.getColumnModel().getColumn(2).setResizable(false);
            TablaProductos.getColumnModel().getColumn(3).setResizable(false);
            TablaProductos.getColumnModel().getColumn(4).setResizable(false);
            TablaProductos.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelBusqueda)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CampoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addComponent(BotonBuscar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(MensajeError)))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelOrdenarPor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ListaDeFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(BotonOrdenar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Titulo)
                .addGap(274, 274, 274))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelBusqueda)
                            .addComponent(CampoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MensajeError))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelOrdenarPor)
                            .addComponent(ListaDeFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonOrdenar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        Titulo.getAccessibleContext().setAccessibleName("Titulo");
    }// </editor-fold>//GEN-END:initComponents

    private void CampoBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoBusquedaActionPerformed

    }//GEN-LAST:event_CampoBusquedaActionPerformed

    private void BotonOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonOrdenarActionPerformed
        ArrayList<Producto> productosSorted = new ArrayList<>(Inventario.productos);
        String criterio = (String) ListaDeFiltros.getSelectedItem();
        
        switch (criterio) {
            case "Código":
                productosSorted.sort((a, b) -> Integer.compare(a.getCodigo(), b.getCodigo()));
                break;
            case "Nombre":
                productosSorted.sort((a, b) -> a.nombre.compareToIgnoreCase(b.nombre));
                break;
            case "Categoría":
                productosSorted.sort((a, b) -> a.categoria.compareToIgnoreCase(b.categoria));
                break;
            case "Precio":
                productosSorted.sort((a, b) -> Double.compare(a.precio, b.precio));
                break;
            case "Cantidad":
                productosSorted.sort((a, b) -> Integer.compare(a.cantidad, b.cantidad));
                break;
            default:
                break;
        }
        
        DefaultTableModel modelo = (DefaultTableModel) TablaProductos.getModel();
        modelo.setRowCount(0); // Limpia la tabla
        for (Producto p : productosSorted) {
            modelo.addRow(new Object[]{
                p.getCodigo(),
                p.nombre,
                p.categoria,
                p.precio,
                p.precioC,
                p.cantidad
            });
        }
    }//GEN-LAST:event_BotonOrdenarActionPerformed

    private void BotonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarActionPerformed
        String NombreCodigo = CampoBusqueda.getText();
        Producto encontrado = null;
        try {
            int codigoBuscado = Integer.parseInt(NombreCodigo); // evaluar si es código
            for (Producto p : Inventario.productos) {
                if (p.getCodigo() == codigoBuscado) {
                    encontrado = p;
                    break;
                }
            }
        } catch (NumberFormatException e) { // si no es número, buscar por nombre
            for (Producto p : Inventario.productos) {
                if (p.nombre.equalsIgnoreCase(NombreCodigo)) {
                    encontrado = p;
                    break;
                }
            }
        }

        if (encontrado != null) {
            MensajeError.setVisible(false);
            DefaultTableModel modelo = (DefaultTableModel) TablaProductos.getModel();
            while (modelo.getRowCount() > 0) {
                modelo.removeRow(0);
            }
            modelo.addRow(new Object[]{
                encontrado.getCodigo(),
                encontrado.nombre,
                encontrado.categoria,
                encontrado.precio,
                encontrado.cantidad
            });
        } else {
            MensajeError.setVisible(true);
            MensajeError.setText("Producto no registrado en el inventario");
        }
    }//GEN-LAST:event_BotonBuscarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBuscar;
    private javax.swing.JButton BotonOrdenar;
    private javax.swing.JTextField CampoBusqueda;
    private javax.swing.JLabel LabelBusqueda;
    private javax.swing.JComboBox<String> ListaDeFiltros;
    private javax.swing.JLabel MensajeError;
    private javax.swing.JTable TablaProductos;
    private javax.swing.JLabel Titulo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelOrdenarPor;
    // End of variables declaration//GEN-END:variables
}
