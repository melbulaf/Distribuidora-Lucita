/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Jorkman
 */

package Proyect.View;

import Proyect.Model.Cliente;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;



public class EditarCliente extends javax.swing.JPanel {

    /**
     * Creates new form EditarCliente
     */
    public EditarCliente() {
        initComponents();
        setPreferredSize(new Dimension(870, 480));
        Cliente.cargarClientes(); // Carga desde archivo
        cargarClientesEnTabla();
    }


    private void cargarClientesEnTabla() {
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0);

        for (Cliente c : Cliente.getClientes()) {
            modelo.addRow(new Object[]{
                c.getNombre(),
                c.getApellido(),
                c.getTelefono(),
                c.getCorreo(),
                c.getDireccion(),
                c.esUrgente() ? "Sí" : "No"
            });
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextbuscar = new javax.swing.JTextField();
        jTextNuevo = new javax.swing.JTextField();
        jTextActual = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxCambio = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonGuardar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonVolver = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Teléfono", "Correo", "Dirección", "Urgencia"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        jTextbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextbuscarActionPerformed(evt);
            }
        });

        jTextNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNuevoActionPerformed(evt);
            }
        });

        jTextActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextActualActionPerformed(evt);
            }
        });

        jLabel1.setText("Parametro a cambiar ");

        jComboBoxCambio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Apellido", "Teléfono", "Correo", "Direccion", "Urgencia" }));
        jComboBoxCambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCambioActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre y Apellido");

        jLabel3.setText("Actual");

        jLabel4.setText("Nuevo");

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonVolver.setText("Volver");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(jLabel2)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBoxCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(92, 92, 92)
                                        .addComponent(jTextActual, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)
                                        .addComponent(jTextNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(120, 120, 120)
                                        .addComponent(jLabel3)
                                        .addGap(101, 101, 101)
                                        .addComponent(jLabel4))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jButtonBuscar)
                        .addGap(60, 60, 60)
                        .addComponent(jButtonGuardar)
                        .addGap(58, 58, 58)
                        .addComponent(jButtonEliminar)
                        .addGap(72, 72, 72)
                        .addComponent(jButtonVolver)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardar)
                    .addComponent(jButtonEliminar)
                    .addComponent(jButtonVolver)
                    .addComponent(jButtonBuscar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextbuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextbuscarActionPerformed

    private void jTextNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNuevoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNuevoActionPerformed

    private void jTextActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextActualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextActualActionPerformed

    private void jComboBoxCambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCambioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCambioActionPerformed

    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        javax.swing.JInternalFrame internalFrame = (javax.swing.JInternalFrame)
                SwingUtilities.getAncestorOfClass(javax.swing.JInternalFrame.class, this);
        if (internalFrame != null) {
            internalFrame.dispose();
        }
    }//GEN-LAST:event_jButtonVolverActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
    String nombreApellido = jTextbuscar.getText().trim();
        if (nombreApellido.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar nombre y apellido del cliente a eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

    String[] partes = nombreApellido.split(" ");
        if (partes.length < 2) {
            JOptionPane.showMessageDialog(this, "Debe ingresar nombre y apellido separados por un espacio.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

    String nombre = partes[0];
    String apellido = partes[1];

        int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar a este cliente?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean eliminado = Cliente.eliminarCliente(nombre, apellido);
            if (eliminado) {
                JOptionPane.showMessageDialog(this, "Cliente eliminado exitosamente.");
                cargarClientesEnTabla();
                jTextbuscar.setText("");
                jTextActual.setText("");
                jTextNuevo.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Cliente no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }   
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        String nombreCompleto = jTextbuscar.getText().trim();
        String nuevoValor = jTextNuevo.getText().trim();
        String parametro = jComboBoxCambio.getSelectedItem().toString();

        if (nombreCompleto.isEmpty() || nuevoValor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
            return;
        }

        String[] partes = nombreCompleto.split(" ");
        if (partes.length < 2) {
            JOptionPane.showMessageDialog(this, "Ingrese el nombre y apellido separados por un espacio.");
            return;
        }

        String nombre = partes[0];
        String apellido = partes[1];

        Cliente cliente = Cliente.buscarCliente(nombre, apellido);

        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Cliente no encontrado.");
            return;
        }

        // Validar formato de teléfono
        if (parametro.equalsIgnoreCase("teléfono")) {
            nuevoValor = nuevoValor.replaceAll("[^0-9]", "");
            if (nuevoValor.length() != 10) {
                JOptionPane.showMessageDialog(this, "El teléfono debe tener exactamente 10 dígitos.");
                return;
            }
        }

        // Validar formato de correo
        if (parametro.equalsIgnoreCase("correo")) {
            if (!nuevoValor.matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$")) {
                JOptionPane.showMessageDialog(this, "Correo inválido.");
                return;
            }
        }

        // Validar urgencia
        if (parametro.equalsIgnoreCase("urgencia")) {
            if (!nuevoValor.equalsIgnoreCase("sí") && !nuevoValor.equalsIgnoreCase("no")) {
                JOptionPane.showMessageDialog(this, "El valor de urgencia debe ser 'Sí' o 'No'.");
                return;
            }
        }

        // Validar duplicados
        if (parametro.equalsIgnoreCase("nombre") || parametro.equalsIgnoreCase("apellido") ||
            parametro.equalsIgnoreCase("teléfono") || parametro.equalsIgnoreCase("correo")) {

            String nuevoNombre = parametro.equalsIgnoreCase("nombre") ? nuevoValor : cliente.getNombre();
            String nuevoApellido = parametro.equalsIgnoreCase("apellido") ? nuevoValor : cliente.getApellido();
            String nuevoTelefono = parametro.equalsIgnoreCase("teléfono") ? nuevoValor : cliente.getTelefono();
            String nuevoCorreo = parametro.equalsIgnoreCase("correo") ? nuevoValor : cliente.getCorreo();

            boolean existe = Cliente.existeClienteEditando(cliente, nuevoTelefono, nuevoCorreo, nuevoNombre, nuevoApellido);
            if (existe) {
                JOptionPane.showMessageDialog(this, "Ya existe un cliente con ese nombre, teléfono o correo.");
                return;
            }
        }

        boolean exito = Cliente.editarCliente(cliente, parametro, nuevoValor);
        if (exito) {
            JOptionPane.showMessageDialog(this, "Cliente actualizado correctamente.");
            Cliente.cargarClientesDesdeArchivo();
            cargarClientesEnTabla();
            jTextActual.setText(nuevoValor);
            jTextNuevo.setText("");
            jTextbuscar.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar el cliente.");
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        String nombreApellido = jTextbuscar.getText().trim();
        String parametro = (String) jComboBoxCambio.getSelectedItem();

        if (nombreApellido.isEmpty() || parametro == null) {
            JOptionPane.showMessageDialog(this, "Ingrese nombre y apellido, y seleccione un parámetro.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String[] partes = nombreApellido.split(" ");
        if (partes.length < 2) {
            JOptionPane.showMessageDialog(this, "Debe ingresar nombre y apellido separados por un espacio.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String nombre = partes[0];
        String apellido = partes[1];

        Cliente cliente = Cliente.buscarCliente(nombre, apellido);

        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Cliente no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        switch (parametro) {
            case "Nombre":
                jTextActual.setText(cliente.getNombre());
                break;
            case "Apellido":
                jTextActual.setText(cliente.getApellido());
                break;
            case "Teléfono":
                jTextActual.setText(String.valueOf(cliente.getTelefono()));
                break;
            case "Correo":
                jTextActual.setText(cliente.getCorreo());
                break;
            case "Direccion":
                jTextActual.setText(cliente.getDireccion());
                break;
            case "Urgencia":
                jTextActual.setText(cliente.esUrgente() ? "Sí" : "No");
                break;
            default:
                jTextActual.setText("");
                break;
        } 
    }//GEN-LAST:event_jButtonBuscarActionPerformed
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JComboBox<String> jComboBoxCambio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextActual;
    private javax.swing.JTextField jTextNuevo;
    private javax.swing.JTextField jTextbuscar;
    // End of variables declaration//GEN-END:variables
}
